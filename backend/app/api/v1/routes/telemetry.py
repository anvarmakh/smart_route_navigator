# ‚úÖ telemetry.py ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è
from fastapi import APIRouter, Depends
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import get_db
import redis.asyncio as redis
import os
from app.services.route_service import build_route
from app.services.auth_service import get_current_user
from app.services.alert_service import notify_all_channels_async
from geopy.distance import geodesic

router = APIRouter()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(
    host=os.getenv("REDIS_HOST", "localhost"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    db=0,
    decode_responses=True
)

# üìç –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∏—ë–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–æ–¥–∏—Ç–µ–ª—è
class LocationPayload(BaseModel):
    latitude: float
    longitude: float
    timestamp: str

# üöö –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è
@router.post("/api/v1/telemetry/location")
async def update_driver_location(
    payload: LocationPayload,
    db: AsyncSession = Depends(get_db),
    current_user=Depends(get_current_user)
):
    user_id = current_user.id
    location_key = f"driver:{user_id}:location"
    route_key = f"driver:{user_id}:route_destination"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≤ Redis
    await redis_client.hset(location_key, mapping={
        "lat": payload.latitude,
        "lon": payload.longitude,
        "ts": payload.timestamp
    })
    await redis_client.expire(location_key, 3600)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –º–∞—Ä—à—Ä—É—Ç–∞
    dest = await redis_client.get(route_key)
    if dest:
        try:
            dest_lat, dest_lon = map(float, dest.split(","))
            current = (payload.latitude, payload.longitude)
            distance = geodesic(current, (dest_lat, dest_lon)).miles
            if distance > 25:
                msg = f"üö® Driver ID {user_id} –æ—Ç–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ {distance:.1f} –º–∏–ª—å."
                print(f"[ALERT] {msg}")
                await notify_all_channels_async(subject="Driver Deviation Alert", message=msg)
        except Exception as e:
            print("[WARN] Unable to check deviation:", e)

    return {"message": "Location updated"}

# üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
@router.post("/api/v1/telemetry/build-route")
async def build_route_from_current_location(
    destination: str,
    height: float,
    weight: int,
    db: AsyncSession = Depends(get_db),
    current_user=Depends(get_current_user)
):
    user_id = current_user.id
    location_key = f"driver:{user_id}:location"

    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ Redis
    location_data = await redis_client.hgetall(location_key)
    if not location_data:
        return {"error": "No location data found"}

    origin = f"{location_data['lon']},{location_data['lat']}"

    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–∫—É –≤ Redis
    await redis_client.set(f"driver:{user_id}:route_destination", destination)

    # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Samsara
    from integrations.samsara_provider import get_samsara_vehicle_info_async
    samsara_data = await get_samsara_vehicle_info_async(user_id)
    fuel_level = samsara_data.get("fuel_level", 100)
    driver_time_left = samsara_data.get("driver_time_left", 11)  # –≤ —á–∞—Å–∞—Ö

    # 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    from app.services.weather import get_weather_along_route_async
    origin_coords = tuple(map(float, origin.split(",")))
    dest_coords = tuple(map(float, destination.split(",")))
    weather_condition = await get_weather_along_route_async([origin_coords, dest_coords])

    # 5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    preferences = {
        "fuel_level": fuel_level,
        "driver_time_left": driver_time_left,
        "weather": weather_condition
    }

    # 6. –í—ã–∑—ã–≤–∞–µ–º build_route —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    route = await build_route(
        origin=origin,
        destination=destination,
        height=height,
        weight=weight,
        db=db,
        user_id=user_id,
        driver_time_left=driver_time_left,
        weather_condition=weather_condition,
        preferences=preferences
    )

    return route