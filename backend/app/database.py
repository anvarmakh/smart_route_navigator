# ‚úÖ async_database.py ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —á–µ—Ä–µ–∑ async SQLAlchemy
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os
from dotenv import load_dotenv

# üìä –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# üìÇ URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (asyncpg)
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://postgres:password@localhost:5432/smart_route")

# üöÄ –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
engine = create_async_engine(DATABASE_URL, echo=True)

# üîß –°–µ—Å—Å–∏–∏ ORM
AsyncSessionLocal = sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False
)

# üîÑ Base –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# üß≤ –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è session –≤ endpoint
async def get_db():
    async with AsyncSessionLocal() as session:
        yield session
