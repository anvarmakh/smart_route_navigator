# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.models.subscription import Subscription


ACTIVE_PLANS = {
    "basic": ["route"],
    "premium": ["route", "fuel", "weather"]
}


# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–∫—Ä—ã–≤–∞—é—â–∞—è –Ω—É–∂–Ω—É—é —Ñ–∏—á—É
async def check_user_plan_async(db: AsyncSession, user, feature: str) -> bool:
    result = await db.execute(
        select(Subscription).where(Subscription.user_id == user.id)
    )
    subscription = result.scalars().first()
    
    if not subscription or not subscription.active:
        return False

    # –î–æ–ø—É—Å—Ç–∏–º, –ø–æ–¥–ø–∏—Å–∫–∞ —Ö—Ä–∞–Ω–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ñ–∏—á –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏: "routing,fuel,analytics"
    if feature not in (subscription.features or "").split(","):
        return False

    return True